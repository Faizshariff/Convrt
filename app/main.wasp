app OpenSaaS {
  wasp: {
    version: "^0.13.2"
  },
  title: "Mail-Octo",
  head: [
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='My Open SaaS App' />",
    "<meta property='og:url' content='https://opensaas.sh' />", 
    "<meta property='og:description' content='I made a SaaS App. Buy my stuff.' />",
    "<meta property='og:image' content='https://opensaas.sh/public-banner.png' />",
    "<meta name='twitter:image' content='https://opensaas.sh/public-banner.png' />", 
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.js'></script>",
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.local.js'></script>",
  ],
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "Mail-Octo",
          email: "faizshariff540@gmail.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/server/auth/email.js",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/server/auth/email.js",
        },
        userSignupFields: import { getEmailUserFields } from "@src/server/auth/setUsername.js",
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/demo-app",
  },
  db: { 
    system: PostgreSQL,
  },
  client: {
    rootComponent: import App from "@src/client/App",
  },
  server: {
    setupFn: import setup from "@src/server/serverSetup",
    middlewareConfigFn: import { serverMiddlewareFn } from "@src/server/serverSetup"
  },
  emailSender: {
    provider: SendGrid,
    defaultFrom: {
      name: "Mail-Octo",
      email: "faizshariff540@gmail.com"
    },
  },
}


entity User {=psl
  id                        Int             @id @default(autoincrement())
  email                     String?         @unique
  username                  String?         @unique
  createdAt                 DateTime        @default(now())
  lastActiveTimestamp       DateTime        @default(now())
  isAdmin                   Boolean         @default(false)
  stripeId                  String? 
  checkoutSessionId         String?
  subscriptionTier          String?
  subscriptionStatus        String?
  sendEmail                 Boolean         @default(false)
  datePaid                  DateTime?
  credits                   Int             @default(3)
  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  campaigns                 Campaign[]
psl=}

entity GptResponse {=psl
  id                        String          @id @default(uuid())
  content                   String
  user                      User?           @relation(fields: [userId], references: [id])
  userId                    Int?
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
psl=}

entity Campaign {=psl
  id         Int       @id @default(autoincrement())
  name       String
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  Totalmail  Int
  emails     Email[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
 psl=}

entity Email {=psl
  id             String
  mailid         Int          @id @default(autoincrement())
  recipientEmail String
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  campaignId     Int
  status         String       @default("PENDING")
  opened         Boolean      @default(false)
  delivered      Boolean      @default(false)
  bounced        Boolean      @default(false)
  unsubscribed   Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
psl=}

/*
enum EmailStatus {=psl
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  DROPPED
  FAILED
psl=}

*/

entity Task {=psl
  id                        String          @id @default(uuid())
  description               String          @default("null")
  Location                  String          @default("null")
  email                     String
  Status                    String          @default("Pending")
  name                      String          @default("null")
  Subscribed                Boolean         @default(true)
  Tag                       String          @default("general")
  Number                    String          @default("null")
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
  user                      User            @relation(fields: [userId], references: [id])
  userId                    Int
  createdAt                 DateTime        @default(now())
psl=}

entity File {=psl
  id                        String          @id @default(uuid())
  name                      String
  type                      String
  key                       String
  uploadUrl                 String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    Int
  createdAt                 DateTime        @default(now())
psl=}

// TODO: add functionality to allow users to send messages to admin
// and make them accessible via the admin dashboard
entity ContactFormMessage {=psl
  id                        String          @id @default(uuid())
  content                   String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    Int
  createdAt                 DateTime        @default(now())
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?       
psl=}

entity DailyStats {=psl 
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique
  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float             @default(0)
  totalProfit                      Float             @default(0)
  sources                          PageViewSource[]
psl=}

entity PageViewSource {=psl
  date                     DateTime        @default(now())       
  name                     String          
  visitors                 Int             
  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?
  @@id([date, name])
psl=}

entity Logs {=psl
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())
  message                  String
  level                    String
psl=}

/* 📡 These are the Wasp Routes (You can protect them easily w/ 'authRequired: true');
 * https://wasp-lang.dev/docs/tutorial/pages
 */

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/client/landing-page/LandingPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/client/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/client/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/client/auth/RequestPasswordReset",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@src/client/auth/PasswordReset",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@src/client/auth/EmailVerification",
}

route DemoAppRoute { path: "/contact-list", to: DemoAppPage }
page DemoAppPage {
  authRequired: true,
  component: import DemoAppPage from "@src/client/app/ContactsPage"
}

route CampaignRoute { path: "/campaign", to: CampaignPage }
page CampaignPage {
  authRequired: true,
  component: import CampaignPage from "@src/client/app/CampaignPage"
}

route WriteRoute { path: "/write", to: Write }
page Write {
  authRequired: true,
  component: import Write from "@src/client/components/CampaignPage/Write"
}

route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/client/app/PricingPage"
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/client/app/AccountPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/client/app/CheckoutPage"
}

route FileUploadRoute { path: "/mailboard", to: FileUploadPage }
page FileUploadPage {
  authRequired: true,
  component: import FileUpload from "@src/client/app/Mailboard"
}

route AdminRoute { path: "/admin", to: DashboardPage }
page DashboardPage {
  authRequired: true,
  component: import Dashboard from "@src/client/admin/pages/DashboardPage"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/client/admin/pages/Users"
}









/* ⛑ These are the Wasp Operations, which allow the client and server to interact:
 * https://wasp-lang.dev/docs/data-model/operations/overview
 */

// 📝 Actions

action awsuser{
  fn: import { awsuser } from "@src/server/actions.js",
}

action importmail{
 fn: import { importmail }  from "@src/server/actions.js",
}




action generateGptResponse {
  fn: import { generateGptResponse } from "@src/server/actions.js",
  entities: [User, Task, GptResponse]
}

action createTask {
  fn: import { createTask } from "@src/server/actions.js",
  entities: [Task]
}

action createCampaign {
  fn: import { createCampaign }  from "@src/server/actions.js",
  entities: [Campaign,Task]
}

action deleteTask {
  fn: import { deleteTask } from "@src/server/actions.js",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@src/server/actions.js",
  entities: [Task]
}

action stripePayment {
  fn: import { stripePayment } from "@src/server/actions.js",
  entities: [User]
}

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/server/actions.js",
  entities: [User]
}

action updateUserById {
  fn: import { updateUserById } from "@src/server/actions.js",
  entities: [User]
}




// 📚 Queries

query getGptResponses {
  fn: import { getGptResponses } from "@src/server/queries.js",
  entities: [User, GptResponse]
}

query getAllTasksByUser {
  fn: import { getAllTasksByUser } from "@src/server/queries.js",
  entities: [Task]
}

query getAllFilesByUser {
  fn: import { getAllFilesByUser } from "@src/server/queries.js",
  entities: [User, File]
}


query getDailyStats {
  fn: import { getDailyStats } from "@src/server/queries.js",
  entities: [User, DailyStats]
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/server/queries.js",
  entities: [User]
}

query getCampaigns {
  fn: import { getCampaigns } from "@src/server/queries.js",
  entities: [Campaign]
}

/*
 📡 These are custom Wasp API Endpoints. Use them for callbacks, webhooks, etc.
 */ 

api stripeWebhook {
  fn: import { stripeWebhook } from "@src/server/webhooks/stripe.js",
  entities: [User],
  middlewareConfigFn: import { stripeMiddlewareFn } from "@src/server/webhooks/stripe.js",
  httpRoute: (POST, "/stripe-webhook")
}

api emailsns {
  fn: import { emailsns } from "@src/server/webhooks/emailsns",
  auth: true,
  entities: [Email],
  httpRoute: (POST, "/sns/mailpoint")
}



/* 🕵️‍♂️ These are the Wasp Jobs. Use them to set up recurring tasks and/or queues:
 * https://wasp-lang.dev/docs/advanced/jobs
 */

job emailChecker {
  executor: PgBoss,
  perform: {
    fn: import { checkAndQueueEmails } from "@src/server/workers/checkAndQueueEmails.js"
  },
  schedule: {
    cron: "0 7 * * 1" // at 7:00 am every Monday
  },
  entities: [User]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/server/workers/calculateDailyStats.js"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}
